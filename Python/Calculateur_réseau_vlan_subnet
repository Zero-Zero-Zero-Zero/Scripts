import sys
import ipaddress
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QLabel, QLineEdit, QPushButton, 
                             QTextEdit, QSpinBox, QTableWidget, QComboBox,
                             QTableWidgetItem, QGroupBox, QMessageBox, 
                             QHeaderView, QTabWidget, QToolTip)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor, QFont

class IPCalculatorPro(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Générateur Pro de Plages IP Auto-adaptatif")
        self.setGeometry(100, 100, 1200, 900)
        
        # Variables d'état
        self.main_network = None
        self.vlans = []
        
        # Style
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QGroupBox {
                border: 1px solid #ccc;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 15px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 3px;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                text-align: center;
                text-decoration: none;
                font-size: 14px;
                margin: 4px 2px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
            QTableWidget {
                background-color: white;
                border: 1px solid #ddd;
            }
            QTextEdit {
                background-color: white;
                border: 1px solid #ddd;
            }
            QLineEdit, QSpinBox, QComboBox {
                padding: 5px;
                border: 1px solid #ddd;
                border-radius: 3px;
            }
            QTabWidget::pane {
                border: 1px solid #ddd;
                margin-top: 10px;
            }
            QTabBar::tab {
                padding: 8px 16px;
            }
        """)
        
        # Interface principale avec onglets
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)
        self.layout = QVBoxLayout()
        self.main_widget.setLayout(self.layout)
        
        # Création des onglets
        self.tabs = QTabWidget()
        self.layout.addWidget(self.tabs)
        
        # Onglet 1: Configuration principale
        self.tab_main = QWidget()
        self.tabs.addTab(self.tab_main, "Configuration Réseau")
        self.tab_main_layout = QVBoxLayout()
        self.tab_main.setLayout(self.tab_main_layout)
        
        self.create_main_network_section()
        self.create_vlan_section()
        self.create_results_section()
        
        # Onglet 2: Subnetting manuel
        self.tab_subnet = QWidget()
        self.tabs.addTab(self.tab_subnet, "Subnetting Manuel")
        self.tab_subnet_layout = QVBoxLayout()
        self.tab_subnet.setLayout(self.tab_subnet_layout)
        
        self.create_subnet_section()
    
    def create_main_network_section(self):
        """Section pour la configuration réseau principale"""
        group = QGroupBox("Étape 1 - Configuration du Réseau Principal")
        layout = QVBoxLayout()
        
        # Nombre total de périphériques
        row1 = QHBoxLayout()
        row1.addWidget(QLabel("Nombre total de périphériques:"))
        self.total_devices = QSpinBox()
        self.total_devices.setRange(1, 16777214)
        self.total_devices.setValue(500)
        row1.addWidget(self.total_devices)
        row1.addStretch()
        layout.addLayout(row1)
        
        # Réserve pour croissance
        row2 = QHBoxLayout()
        row2.addWidget(QLabel("Réserve pour croissance:"))
        self.growth_spin = QSpinBox()
        self.growth_spin.setRange(0, 300)
        self.growth_spin.setValue(20)
        row2.addWidget(self.growth_spin)
        row2.addWidget(QLabel("%"))
        row2.addStretch()
        layout.addLayout(row2)
        
        # Bouton de calcul
        self.calc_main_btn = QPushButton("Calculer la Plage Principale Automatique")
        self.calc_main_btn.clicked.connect(self.calculate_main_network)
        layout.addWidget(self.calc_main_btn)
        
        # Résultats réseau principal
        self.main_net_result = QTextEdit()
        self.main_net_result.setReadOnly(True)
        self.main_net_result.setMaximumHeight(120)
        layout.addWidget(self.main_net_result)
        
        group.setLayout(layout)
        self.tab_main_layout.addWidget(group)
    
    def create_vlan_section(self):
        """Section pour la configuration des VLANs"""
        self.vlan_group = QGroupBox("Étape 2 - Configuration des VLANs")
        self.vlan_group.setEnabled(False)
        layout = QVBoxLayout()
        
        # Contrôles pour ajouter des VLANs
        add_vlan_group = QGroupBox("Ajouter un VLAN")
        add_layout = QHBoxLayout()
        
        add_layout.addWidget(QLabel("Nom VLAN:"))
        self.vlan_name = QLineEdit("VLAN")
        self.vlan_name.setPlaceholderText("Nom du VLAN")
        add_layout.addWidget(self.vlan_name)
        
        add_layout.addWidget(QLabel("Description:"))
        self.vlan_desc = QLineEdit()
        self.vlan_desc.setPlaceholderText("Description optionnelle")
        add_layout.addWidget(self.vlan_desc)
        
        add_layout.addWidget(QLabel("Priorité:"))
        self.vlan_priority = QComboBox()
        self.vlan_priority.addItems(["Standard", "Haute", "Critique (DMZ)", "Faible"])
        add_layout.addWidget(self.vlan_priority)
        
        add_layout.addWidget(QLabel("Nb Périphériques:"))
        self.vlan_devices = QSpinBox()
        self.vlan_devices.setRange(1, 10000)
        self.vlan_devices.setValue(10)
        add_layout.addWidget(self.vlan_devices)
        
        self.add_vlan_btn = QPushButton("+ Ajouter")
        self.add_vlan_btn.clicked.connect(self.add_vlan_row)
        add_layout.addWidget(self.add_vlan_btn)
        
        add_vlan_group.setLayout(add_layout)
        layout.addWidget(add_vlan_group)
        
        # Tableau des VLANs
        self.vlan_table = QTableWidget()
        self.vlan_table.setColumnCount(5)
        self.vlan_table.setHorizontalHeaderLabels(["Nom VLAN", "Description", "Priorité", "Nb Périphériques", "Actions"])
        self.vlan_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.vlan_table.horizontalHeader().setSectionResizeMode(4, QHeaderView.ResizeToContents)
        layout.addWidget(self.vlan_table)
        
        # Boutons de contrôle
        btn_layout = QHBoxLayout()
        self.clear_vlans_btn = QPushButton("Vider la liste")
        self.clear_vlans_btn.clicked.connect(self.clear_vlans)
        btn_layout.addWidget(self.clear_vlans_btn)
        
        self.calc_vlan_btn = QPushButton("Calculer les Plages VLAN")
        self.calc_vlan_btn.clicked.connect(self.calculate_vlans)
        btn_layout.addWidget(self.calc_vlan_btn)
        
        layout.addLayout(btn_layout)
        self.vlan_group.setLayout(layout)
        self.tab_main_layout.addWidget(self.vlan_group)
    
    def create_subnet_section(self):
        """Section pour le subnetting manuel dans un onglet séparé"""
        group = QGroupBox("Subnetting Manuel")
        layout = QVBoxLayout()
        
        # Explication claire du format CIDR
        cidr_help = QLabel("Format CIDR attendu : [Adresse IP]/[Masque]. Exemple : 192.168.1.0/24")
        cidr_help.setStyleSheet("font-style: italic; color: #666; padding-bottom: 10px;")
        layout.addWidget(cidr_help)
        
        # Configuration du réseau à subnetter
        config_group = QGroupBox("Configuration")
        config_layout = QVBoxLayout()
        
        # Ligne 1: Entrée CIDR
        cidr_layout = QHBoxLayout()
        cidr_layout.addWidget(QLabel("Plage réseau (CIDR):"))
        self.subnet_input = QLineEdit()
        self.subnet_input.setPlaceholderText("Exemple : 192.168.1.0/24")
        self.subnet_input.setToolTip("Format: X.X.X.X/Y où X=0-255 et Y=1-32\nExemples valides:\n- 192.168.1.0/24\n- 10.0.0.0/16\n- 172.16.0.0/12")
        cidr_layout.addWidget(self.subnet_input)
        config_layout.addLayout(cidr_layout)
        
        # Ligne 2: Nombre de sous-réseaux
        count_layout = QHBoxLayout()
        count_layout.addWidget(QLabel("Nombre de sous-réseaux:"))
        self.subnet_count = QSpinBox()
        self.subnet_count.setRange(2, 256)
        self.subnet_count.setValue(4)
        count_layout.addWidget(self.subnet_count)
        count_layout.addStretch()
        config_layout.addLayout(count_layout)
        
        # Bouton de calcul
        self.calc_subnet_btn = QPushButton("Calculer les sous-réseaux")
        self.calc_subnet_btn.clicked.connect(self.calculate_subnets)
        config_layout.addWidget(self.calc_subnet_btn)
        
        config_group.setLayout(config_layout)
        layout.addWidget(config_group)
        
        # Résultats du subnetting
        self.subnet_result = QTextEdit()
        self.subnet_result.setReadOnly(True)
        self.subnet_result.setMaximumHeight(100)
        layout.addWidget(self.subnet_result)
        
        # Tableau des sous-réseaux
        self.subnet_table = QTableWidget()
        self.subnet_table.setColumnCount(6)
        self.subnet_table.setHorizontalHeaderLabels([
            "Sous-réseau", "Plage CIDR", "Masque", "1ère IP", "Dernière IP", "IPs Utilisables"
        ])
        self.subnet_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        layout.addWidget(self.subnet_table)
        
        group.setLayout(layout)
        self.tab_subnet_layout.addWidget(group)
    
    def create_results_section(self):
        """Section des résultats"""
        group = QGroupBox("Résultats Complets")
        layout = QVBoxLayout()
        
        # Bouton d'export
        self.export_btn = QPushButton("Exporter les résultats")
        self.export_btn.setEnabled(False)
        layout.addWidget(self.export_btn)
        
        # Tableau des résultats
        self.result_table = QTableWidget()
        self.result_table.setColumnCount(7)
        self.result_table.setHorizontalHeaderLabels([
            "Type", "Nom", "Plage CIDR", "Masque", "1ère IP", "Dernière IP", "IPs Utilisables"
        ])
        self.result_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        layout.addWidget(self.result_table)
        
        # Résumé
        self.summary_label = QLabel()
        self.summary_label.setStyleSheet("font-weight: bold; color: #0055aa; font-size: 14px;")
        layout.addWidget(self.summary_label)
        
        group.setLayout(layout)
        self.tab_main_layout.addWidget(group)
    
    def validate_inputs(self):
        """Validation des entrées utilisateur"""
        if self.total_devices.value() <= 0:
            raise ValueError("Le nombre de périphériques doit être positif")
        
        if self.growth_spin.value() < 0 or self.growth_spin.value() > 300:
            raise ValueError("La réserve de croissance doit être entre 0% et 300%")
    
    def select_network_range(self, required_ips):
        """Sélectionne automatiquement la plage RFC 1918 appropriée"""
        try:
            if required_ips <= 0:
                raise ValueError("Nombre d'IPs requis invalide")
                
            if required_ips > 65534:  # Classe A
                return "10.0.0.0", 8
            elif required_ips > 254:   # Classe B
                return "172.16.0.0", 12
            else:                      # Classe C
                return "192.168.0.0", 16
        except Exception as e:
            raise ValueError(f"Erreur de sélection de plage: {str(e)}")
    
    def calculate_main_network(self):
        """Calcule le réseau principal avec sélection auto de la plage"""
        try:
            self.validate_inputs()
            
            total_devices = self.total_devices.value()
            growth_factor = 1 + (self.growth_spin.value() / 100)
            required_ips = int(total_devices * growth_factor)
            
            if required_ips <= 0:
                raise ValueError("Le nombre d'IPs calculé est invalide")
            
            # Sélection automatique de la plage RFC 1918
            base_ip, max_prefix = self.select_network_range(required_ips)
            
            # Calcul du préfixe nécessaire
            prefix = 32 - (required_ips.bit_length() if required_ips > 0 else 0)
            prefix = max(max_prefix, min(30, prefix))
            
            # Création du réseau
            self.main_network = ipaddress.IPv4Network(f"{base_ip}/{prefix}", strict=False)
            
            # Affichage des résultats
            self.main_net_result.clear()
            self.main_net_result.append("<b>=== RÉSEAU PRINCIPAL ===</b>")
            self.main_net_result.append(f"<b>Plage CIDR:</b> {self.main_network}")
            self.main_net_result.append(f"<b>Masque:</b> {self.main_network.netmask}")
            self.main_net_result.append(f"<b>Première IP:</b> {self.main_network.network_address + 1}")
            self.main_net_result.append(f"<b>Dernière IP:</b> {self.main_network.broadcast_address - 1}")
            
            # Active la section VLAN
            self.vlan_group.setEnabled(True)
            
        except ValueError as ve:
            QMessageBox.warning(self, "Erreur de saisie", f"Veuillez vérifier vos entrées:\n{str(ve)}")
        except ipaddress.NetmaskValueError as nve:
            QMessageBox.critical(self, "Erreur de masque", f"Masque réseau invalide:\n{str(nve)}")
        except Exception as e:
            QMessageBox.critical(self, "Erreur inattendue", f"Une erreur est survenue:\n{str(e)}")
    
    def calculate_subnets(self):
        """Calcule les sous-réseaux selon la configuration manuelle"""
        try:
            network_str = self.subnet_input.text().strip()
            if not network_str:
                raise ValueError("Veuillez entrer une plage réseau en notation CIDR")
            
            subnet_count = self.subnet_count.value()
            if subnet_count < 2:
                raise ValueError("Le nombre de sous-réseaux doit être au moins 2")
            
            network = ipaddress.IPv4Network(network_str, strict=False)
            
            # Calcul du nouveau préfixe
            required_bits = (subnet_count - 1).bit_length()
            new_prefix = network.prefixlen + required_bits
            
            if new_prefix > 30:
                raise ValueError("Trop de sous-réseaux demandés pour la plage fournie")
            
            # Génération des sous-réseaux
            subnets = list(network.subnets(new_prefix=new_prefix))
            
            # Affichage des résultats
            self.subnet_result.clear()
            self.subnet_result.append(f"<b>Réseau original:</b> {network}")
            self.subnet_result.append(f"<b>Nombre de sous-réseaux:</b> {len(subnets)}")
            self.subnet_result.append(f"<b>Masque des sous-réseaux:</b> {subnets[0].netmask}")
            
            # Remplissage du tableau
            self.subnet_table.setRowCount(0)
            for i, subnet in enumerate(subnets[:50]):  # Limite à 50 sous-réseaux pour l'affichage
                row = self.subnet_table.rowCount()
                self.subnet_table.insertRow(row)
                
                # Numéro du sous-réseau
                self.subnet_table.setItem(row, 0, QTableWidgetItem(f"Sous-réseau {i+1}"))
                
                # Plage CIDR
                self.subnet_table.setItem(row, 1, QTableWidgetItem(str(subnet)))
                
                # Masque
                self.subnet_table.setItem(row, 2, QTableWidgetItem(str(subnet.netmask)))
                
                # Première IP
                first_ip = subnet.network_address + 1
                self.subnet_table.setItem(row, 3, QTableWidgetItem(str(first_ip)))
                
                # Dernière IP
                last_ip = subnet.broadcast_address - 1
                self.subnet_table.setItem(row, 4, QTableWidgetItem(str(last_ip)))
                
                # IPs utilisables
                usable = subnet.num_addresses - 2
                self.subnet_table.setItem(row, 5, QTableWidgetItem(str(usable)))
            
            if len(subnets) > 50:
                self.subnet_result.append(f"<b>Note:</b> Seuls les 50 premiers sous-réseaux sont affichés")
                
        except ValueError as ve:
            QMessageBox.warning(self, "Erreur de saisie", str(ve))
        except ipaddress.NetmaskValueError as nve:
            QMessageBox.critical(self, "Erreur réseau", f"Plage réseau invalide:\n{str(nve)}")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur inattendue: {str(e)}")
    
    def add_vlan_row(self):
        """Ajoute un nouveau VLAN au tableau"""
        try:
            name = self.vlan_name.text().strip()
            desc = self.vlan_desc.text().strip()
            priority = self.vlan_priority.currentText()
            devices = self.vlan_devices.value()
            
            if not name:
                raise ValueError("Le nom du VLAN est obligatoire")
            if devices <= 0:
                raise ValueError("Le nombre de périphériques doit être positif")
            
            row = self.vlan_table.rowCount()
            self.vlan_table.insertRow(row)
            
            # Nom VLAN
            name_item = QTableWidgetItem(name)
            name_item.setFlags(name_item.flags() ^ Qt.ItemIsEditable)
            self.vlan_table.setItem(row, 0, name_item)
            
            # Description
            desc_item = QTableWidgetItem(desc)
            desc_item.setFlags(desc_item.flags() ^ Qt.ItemIsEditable)
            self.vlan_table.setItem(row, 1, desc_item)
            
            # Priorité
            priority_item = QTableWidgetItem(priority)
            priority_item.setFlags(priority_item.flags() ^ Qt.ItemIsEditable)
            self.vlan_table.setItem(row, 2, priority_item)
            
            # Mise en forme selon la priorité
            if priority == "Critique (DMZ)":
                for col in range(3):
                    self.vlan_table.item(row, col).setBackground(QColor(255, 200, 200))
            elif priority == "Haute":
                for col in range(3):
                    self.vlan_table.item(row, col).setBackground(QColor(255, 255, 200))
            
            # Nombre de périphériques
            devices_item = QTableWidgetItem()
            devices_item.setData(Qt.DisplayRole, devices)
            devices_item.setFlags(devices_item.flags() ^ Qt.ItemIsEditable)
            self.vlan_table.setItem(row, 3, devices_item)
            
            # Bouton Supprimer
            btn = QPushButton("Supprimer")
            btn.setStyleSheet("background-color: #f44336;")
            btn.clicked.connect(lambda: self.remove_vlan_row(row))
            self.vlan_table.setCellWidget(row, 4, btn)
            
            # Réinitialisation du formulaire
            self.vlan_name.setText("VLAN")
            self.vlan_desc.clear()
            self.vlan_devices.setValue(10)
            
        except ValueError as ve:
            QMessageBox.warning(self, "Erreur de saisie", str(ve))
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur inattendue: {str(e)}")
    
    def remove_vlan_row(self, row):
        """Supprime un VLAN du tableau"""
        try:
            self.vlan_table.removeRow(row)
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Impossible de supprimer la ligne: {str(e)}")
    
    def clear_vlans(self):
        """Vide la liste des VLANs"""
        try:
            self.vlan_table.setRowCount(0)
        except Exception as e:
            QMessageBox.warning(self, "Erreur", f"Impossible de vider la liste: {str(e)}")
    
    def validate_vlans(self):
        """Valide la configuration des VLANs"""
        if self.vlan_table.rowCount() == 0:
            raise ValueError("Aucun VLAN configuré")
        
        total_devices = 0
        for row in range(self.vlan_table.rowCount()):
            devices = int(self.vlan_table.item(row, 3).text())
            if devices <= 0:
                raise ValueError(f"Le VLAN {self.vlan_table.item(row, 0).text()} a un nombre invalide de périphériques")
            total_devices += devices
        
        return total_devices
    
    def calculate_vlans(self):
        """Calcule les sous-réseaux VLAN dans la plage principale avec les conventions .10, .20, .30"""
        try:
            if not self.main_network:
                raise ValueError("Calculez d'abord le réseau principal")
            
            total_devices = self.validate_vlans()
            
            # Récupération des VLANs
            self.vlans = []
            
            for row in range(self.vlan_table.rowCount()):
                name = self.vlan_table.item(row, 0).text()
                desc = self.vlan_table.item(row, 1).text()
                priority = self.vlan_table.item(row, 2).text()
                devices = int(self.vlan_table.item(row, 3).text())
                
                self.vlans.append({
                    'name': name,
                    'description': desc,
                    'priority': priority,
                    'devices': devices,
                    'required': devices + 2  # +2 pour réseau et broadcast
                })
            
            # Vérification capacité
            if total_devices > (self.main_network.num_addresses - 2):
                raise ValueError(f"Capacité réseau principal insuffisante. {total_devices} périphériques demandés pour {self.main_network.num_addresses - 2} disponibles.")
            
            # Tri par priorité (Critique > Haute > Standard > Faible)
            priority_order = {"Critique (DMZ)": 0, "Haute": 1, "Standard": 2, "Faible": 3}
            sorted_vlans = sorted(self.vlans, key=lambda x: (priority_order[x['priority']], -x['required']))
            
            # Assignation des réseaux VLAN selon la convention .10, .20, .30 dans la plage principale
            vlan_counter = 10  # Commence à .10
            current_network = self.main_network
            
            for vlan in sorted_vlans:
                # Calcul du préfixe nécessaire pour ce VLAN
                prefix = 32 - (vlan['required'] - 1).bit_length()
                prefix = max(24, prefix)  # On ne va pas au-delà de /24 pour garder la convention
                
                # Création d'un sous-réseau avec l'adresse .10, .20, .30, etc.
                subnet_address = f"{current_network.network_address + vlan_counter}"
                
                try:
                    vlan_network = ipaddress.IPv4Network(f"{subnet_address}/{prefix}", strict=False)
                    
                    # Vérification que le sous-réseau est dans la plage principale
                    if not vlan_network.subnet_of(current_network):
                        raise ValueError(f"Le VLAN {vlan['name']} dépasse la plage principale")
                    
                    vlan['network'] = vlan_network
                    vlan_counter += 10  # Incrémente de 10 pour le prochain VLAN
                    
                except ipaddress.NetmaskValueError:
                    # Si le masque est trop petit, on ajuste
                    prefix = 32 - (vlan['required'] - 1).bit_length()
                    vlan_network = ipaddress.IPv4Network(f"{subnet_address}/{prefix}", strict=False)
                    vlan['network'] = vlan_network
                    vlan_counter += 10
            
            # Affichage des résultats
            self.display_results()
            self.export_btn.setEnabled(True)
            
        except ValueError as ve:
            QMessageBox.warning(self, "Erreur de configuration", str(ve))
        except ipaddress.NetmaskValueError as nve:
            QMessageBox.critical(self, "Erreur réseau", f"Problème de calcul de sous-réseau:\n{str(nve)}")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur inattendue: {str(e)}")
    
    def display_results(self):
        """Affiche tous les résultats"""
        try:
            self.result_table.setRowCount(0)
            
            # Réseau principal
            self.add_network_to_table("Principal", "Réseau Principal", self.main_network)
            
            # VLANs triés par priorité
            priority_order = {"Critique (DMZ)": 0, "Haute": 1, "Standard": 2, "Faible": 3}
            sorted_vlans = sorted(self.vlans, key=lambda x: priority_order[x['priority']])
            
            for vlan in sorted_vlans:
                self.add_network_to_table(f"VLAN ({vlan['priority']})", vlan['name'], vlan['network'])
            
            # Résumé
            total_devices = sum(v['devices'] for v in self.vlans)
            total_allocated = sum(v['network'].num_addresses - 2 for v in self.vlans)
            efficiency = (total_devices / total_allocated) * 100 if total_allocated > 0 else 0
            
            summary = (
                f"<b>Résumé:</b> {len(self.vlans)} VLANs | "
                f"<b>Périphériques:</b> {total_devices}/{total_allocated} | "
                f"<b>Efficacité:</b> {efficiency:.1f}%<br>"
                f"<b>Plage principale:</b> {self.main_network}"
            )
            
            self.summary_label.setText(summary)
            
        except Exception as e:
            QMessageBox.warning(self, "Erreur d'affichage", f"Impossible d'afficher les résultats: {str(e)}")
    
    def add_network_to_table(self, typ, name, network):
        """Ajoute une ligne au tableau de résultats"""
        try:
            row = self.result_table.rowCount()
            self.result_table.insertRow(row)
            
            # Type
            type_item = QTableWidgetItem(typ)
            self.result_table.setItem(row, 0, type_item)
            
            # Nom
            name_item = QTableWidgetItem(name)
            self.result_table.setItem(row, 1, name_item)
            
            # Plage CIDR
            cidr_item = QTableWidgetItem(str(network))
            self.result_table.setItem(row, 2, cidr_item)
            
            # Masque
            mask_item = QTableWidgetItem(str(network.netmask))
            self.result_table.setItem(row, 3, mask_item)
            
            # Première IP
            first_ip = network.network_address + 1
            first_ip_item = QTableWidgetItem(str(first_ip))
            self.result_table.setItem(row, 4, first_ip_item)
            
            # Dernière IP
            last_ip = network.broadcast_address - 1
            last_ip_item = QTableWidgetItem(str(last_ip))
            self.result_table.setItem(row, 5, last_ip_item)
            
            # IPs utilisables
            usable_item = QTableWidgetItem(str(network.num_addresses - 2))
            self.result_table.setItem(row, 6, usable_item)
            
            # Mise en forme selon le type
            if "Critique" in typ:
                for col in range(7):
                    self.result_table.item(row, col).setBackground(QColor(255, 230, 230))
            elif "Haute" in typ:
                for col in range(7):
                    self.result_table.item(row, col).setBackground(QColor(255, 255, 230))
            
        except Exception as e:
            raise ValueError(f"Erreur lors de l'ajout au tableau: {str(e)}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setFont(QFont("Arial", 10))
    window = IPCalculatorPro()
    window.show()
    sys.exit(app.exec_())
